/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.02;

vertices
(
    (0 -0.7071067 -0.7071067)
    (2 -0.7071067 -0.7071067)
    (2  0.7071067 -0.7071067)
    (0  0.7071067 -0.7071067)
    (0 -0.7071067  0.7071067)
    (2 -0.7071067  0.7071067)
    (2  0.7071067  0.7071067)
    (0  0.7071067  0.7071067)
    (2 -0.7071067 -0.7071067)
    (6 -0.7071067 -0.7071067)
    (6  0.7071067 -0.7071067)
    (2  0.7071067 -0.7071067)
    (2 -0.7071067  0.7071067)
    (6 -0.7071067  0.7071067)
    (6  0.7071067  0.7071067)
    (2  0.7071067  0.7071067)
    
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (20 10 10) simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15) 
    rotor (40 11 11) 
    simpleGrading (1 1 1)
);

edges
(
    arc 3 0 (0 0 -1) 
    arc 0 4 (0 -1 0)
    arc 4 7 (0 0 1)
    arc 7 3 (0 1 0) 
    arc 2 1 (2 0 -1) 
    arc 1 5 (2 -1 0)
    arc 5 6 (2 0 1)
    arc 6 2 (2 1 0) 

    arc 11 8 (2 0 -1) 
    arc 8 12 (2 -1 0)
    arc 12 15 (2 0 1)
    arc 15 11 (2 1 0) 
    arc 10 9 (6 0 -1) 
    arc 9 13 (6 -1 0)
    arc 13 14 (6 0 1)
    arc 14 10 (6 1 0)
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }
    ami1
    {
        type cyclicAMI;
        neighbourPatch ami2;
        transform   noOrdering;
        faces
        (
            (1 2 6 5)
        );
    }
    walls
    {
        type wall;
        faces
        (
            (7 6 2 3)
            (0 3 2 1)
            (1 5 4 0)
            (4 5 6 7)
            (9 8 11 10)
            (15 14 10 11)
            (15 12 13 14)
            (8 9 13 12)
        );
    }
    ami2
    {
        type cyclicAMI;
        neighbourPatch ami1;
        transform   noOrdering;
        faces
        (
            (8 12 15 11)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (9 10 14 13)
        );
    }
);


// ************************************************************************* //
